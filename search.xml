<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>高并发工具类踩坑记</title>
    <url>/2021/06/24/%E9%AB%98%E5%B9%B6%E5%8F%91%E5%B7%A5%E5%85%B7%E7%B1%BB%E4%BD%BF%E7%94%A8%E8%B8%A9%E5%9D%91%E8%AE%B0/</url>
    <content><![CDATA[<blockquote>
<p>本文为博主自学笔记整理，内容来源于互联网，如有侵权，请联系删除。</p>
<p>个人笔记：<a href="https://github.com/dbses/TechNotes">https://github.com/dbses/TechNotes</a></p>
</blockquote>
<p>我们来看看在使用并发工具时，经常遇到哪些坑，以及如何解决、避免这些坑。</p>
<h2 id="踩坑1：线程池中使用-ThreadLocal-导致数据串了"><a href="#踩坑1：线程池中使用-ThreadLocal-导致数据串了" class="headerlink" title="踩坑1：线程池中使用 ThreadLocal 导致数据串了"></a>踩坑1：线程池中使用 ThreadLocal 导致数据串了</h2><ul>
<li>案例场景</li>
</ul>
<p>某业务组同学在生产上有时获取到的用户信息是别人的。使用的代码如下。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;wrong&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map <span class="title">wrong</span><span class="params">(<span class="meta">@RequestParam(&quot;userId&quot;)</span> Integer userId)</span> </span>&#123;</span><br><span class="line">    String before = Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + currentUser.get();</span><br><span class="line">    currentUser.set(userId);</span><br><span class="line">    String after = Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + currentUser.get();</span><br><span class="line">    Map result = <span class="keyword">new</span> HashMap();</span><br><span class="line">    result.put(<span class="string">&quot;before&quot;</span>, before);</span><br><span class="line">    result.put(<span class="string">&quot;after&quot;</span>, after);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>原因分析</li>
</ul>
<p>使用了 ThreadLocal 来缓存获取到的用户信息。程序运行在 Tomcat 中，Tomcat 的工作线程是基于线程池的。</p>
<ul>
<li>解决方案</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;right&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map <span class="title">right</span><span class="params">(<span class="meta">@RequestParam(&quot;userId&quot;)</span> Integer userId)</span> </span>&#123;</span><br><span class="line">    String before = Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + currentUser.get();</span><br><span class="line">    currentUser.set(userId);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        String after = Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + currentUser.get();</span><br><span class="line">        Map result = <span class="keyword">new</span> HashMap();</span><br><span class="line">        result.put(<span class="string">&quot;before&quot;</span>, before);</span><br><span class="line">        result.put(<span class="string">&quot;after&quot;</span>, after);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        currentUser.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="踩坑2：使用-ConcurrentHashMap-没对复合逻辑加锁导致业务逻辑错误"><a href="#踩坑2：使用-ConcurrentHashMap-没对复合逻辑加锁导致业务逻辑错误" class="headerlink" title="踩坑2：使用 ConcurrentHashMap 没对复合逻辑加锁导致业务逻辑错误"></a>踩坑2：使用 ConcurrentHashMap 没对复合逻辑加锁导致业务逻辑错误</h2><ul>
<li>案例场景</li>
</ul>
<p>有一个含 900 个元素的 Map，现在再补充 100 个元素进去，这个补充操作由 10 个线程并发进行。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> THREAD_COUNT = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> ITEM_COUNT = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> ConcurrentHashMap&lt;String, Long&gt; <span class="title">getData</span><span class="params">(<span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> LongStream.rangeClosed(<span class="number">1</span>, count)</span><br><span class="line">            .boxed()</span><br><span class="line">            .collect(Collectors.toConcurrentMap(i -&gt; UUID.randomUUID().toString(), Function.identity(),</span><br><span class="line">                    (o1, o2) -&gt; o1, ConcurrentHashMap::<span class="keyword">new</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;wrong&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">wrong</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    ConcurrentHashMap&lt;String, Long&gt; concurrentHashMap = getData(ITEM_COUNT - <span class="number">100</span>);</span><br><span class="line">    log.info(<span class="string">&quot;init size:&#123;&#125;&quot;</span>, concurrentHashMap.size());</span><br><span class="line"></span><br><span class="line">    ForkJoinPool forkJoinPool = <span class="keyword">new</span> ForkJoinPool(THREAD_COUNT);</span><br><span class="line">    forkJoinPool.execute(() -&gt; IntStream.rangeClosed(<span class="number">1</span>, <span class="number">10</span>).parallel().forEach(i -&gt; &#123;</span><br><span class="line">        <span class="keyword">int</span> gap = ITEM_COUNT - concurrentHashMap.size();</span><br><span class="line">        log.info(<span class="string">&quot;gap size:&#123;&#125;&quot;</span>, gap);</span><br><span class="line">        concurrentHashMap.putAll(getData(gap));</span><br><span class="line">    &#125;));</span><br><span class="line">    forkJoinPool.shutdown();</span><br><span class="line">    forkJoinPool.awaitTermination(<span class="number">1</span>, TimeUnit.HOURS);</span><br><span class="line"></span><br><span class="line">    log.info(<span class="string">&quot;finish size:&#123;&#125;&quot;</span>, concurrentHashMap.size());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出日志如下：</p>
<p><img src="https://gitee.com/yanglu_u/ImgRepository/raw/master/images/20210603214204.png" alt="image-20210603214203964"></p>
<ul>
<li>原因分析</li>
</ul>
<p>诸如 size、isEmpty 和 containsValue 等聚合方法，在并发情况下反映的是 ConcurrentHashMap 的中间状态。</p>
<ul>
<li>解决方案</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;right&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">right</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    ConcurrentHashMap&lt;String, Long&gt; concurrentHashMap = getData(ITEM_COUNT - <span class="number">100</span>);</span><br><span class="line">    log.info(<span class="string">&quot;init size:&#123;&#125;&quot;</span>, concurrentHashMap.size());</span><br><span class="line"></span><br><span class="line">    ForkJoinPool forkJoinPool = <span class="keyword">new</span> ForkJoinPool(THREAD_COUNT);</span><br><span class="line">    <span class="comment">// parallel 默认是 cpu-1 个并发</span></span><br><span class="line">    forkJoinPool.execute(() -&gt; IntStream.rangeClosed(<span class="number">1</span>, <span class="number">10</span>).parallel().forEach(i -&gt; &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (concurrentHashMap) &#123;</span><br><span class="line">            <span class="keyword">int</span> gap = ITEM_COUNT - concurrentHashMap.size();</span><br><span class="line">            log.info(<span class="string">&quot;gap size:&#123;&#125;&quot;</span>, gap);</span><br><span class="line">            concurrentHashMap.putAll(getData(gap));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;));</span><br><span class="line">    forkJoinPool.shutdown();</span><br><span class="line">    forkJoinPool.awaitTermination(<span class="number">1</span>, TimeUnit.HOURS);</span><br><span class="line"></span><br><span class="line">    log.info(<span class="string">&quot;finish size:&#123;&#125;&quot;</span>, concurrentHashMap.size());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出日志如下：</p>
<p><img src="https://gitee.com/yanglu_u/ImgRepository/raw/master/images/20210603214437.png" alt="image-20210603214437847"></p>
<h2 id="踩坑3：使用了-ConcurrentHashMap-但没有充分利用其基于-CAS-安全的方法导致性能问题"><a href="#踩坑3：使用了-ConcurrentHashMap-但没有充分利用其基于-CAS-安全的方法导致性能问题" class="headerlink" title="踩坑3：使用了 ConcurrentHashMap 但没有充分利用其基于 CAS 安全的方法导致性能问题"></a>踩坑3：使用了 ConcurrentHashMap 但没有充分利用其基于 CAS 安全的方法导致性能问题</h2><ul>
<li>案例场景</li>
</ul>
<p>使用 Map 来统计 Key 出现的次数。具体使用如下：</p>
<ol>
<li>使用 ConcurrentHashMap 来统计，Key 的范围是 10；</li>
<li>使用最多 10 个并发，循环操作 1000 万次，每次操作累加随机的 Key；</li>
<li>如果 Key 不存在的话，首次设置值为 1。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> LOOP_COUNT = <span class="number">10000000</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> THREAD_COUNT = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> ITEM_COUNT = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Map&lt;String, Long&gt; <span class="title">normaluse</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    ConcurrentHashMap&lt;String, Long&gt; freqs = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;(ITEM_COUNT);</span><br><span class="line">    ForkJoinPool forkJoinPool = <span class="keyword">new</span> ForkJoinPool(THREAD_COUNT);</span><br><span class="line">    forkJoinPool.execute(() -&gt; IntStream.rangeClosed(<span class="number">1</span>, LOOP_COUNT).parallel().forEach(i -&gt; &#123;</span><br><span class="line">                String key = <span class="string">&quot;item&quot;</span> + ThreadLocalRandom.current().nextInt(ITEM_COUNT);</span><br><span class="line">                <span class="keyword">synchronized</span> (freqs) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (freqs.containsKey(key)) &#123;</span><br><span class="line">                        freqs.put(key, freqs.get(key) + <span class="number">1</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        freqs.put(key, <span class="number">1L</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    ));</span><br><span class="line">    forkJoinPool.shutdown();</span><br><span class="line">    forkJoinPool.awaitTermination(<span class="number">1</span>, TimeUnit.HOURS);</span><br><span class="line">    <span class="keyword">return</span> freqs;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>原因分析</li>
</ul>
<p>computeIfAbsent 高效的原因是它使用了 Java 自带的 Unsafe 实现的 CAS，它在虚拟机层面确 保了写入数据的原子性，比加锁的效率高得多。</p>
<blockquote>
<p><a href="https://blog.csdn.net/wang_8101/article/details/82191146">computeIfAbsent 和 putIfAbsent 的区别</a></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> &lt;K,V&gt; <span class="function"><span class="keyword">boolean</span> <span class="title">casTabAt</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="keyword">int</span> i,</span></span></span><br><span class="line"><span class="params"><span class="function">                                    Node&lt;K,V&gt; c, Node&lt;K,V&gt; v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> U.compareAndSwapObject(tab, ((<span class="keyword">long</span>)i &lt;&lt; ASHIFT) + ABASE, c, v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>解决方案</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Map&lt;String, Long&gt; <span class="title">gooduse</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="comment">// 这里的 Key 变成 LongAdder 了</span></span><br><span class="line">    ConcurrentHashMap&lt;String, LongAdder&gt; freqs = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;(ITEM_COUNT);</span><br><span class="line">    ForkJoinPool forkJoinPool = <span class="keyword">new</span> ForkJoinPool(THREAD_COUNT);</span><br><span class="line">    forkJoinPool.execute(() -&gt; IntStream.rangeClosed(<span class="number">1</span>, LOOP_COUNT).parallel().forEach(i -&gt; &#123;</span><br><span class="line">                String key = <span class="string">&quot;item&quot;</span> + ThreadLocalRandom.current().nextInt(ITEM_COUNT);</span><br><span class="line">                <span class="comment">// LongAdder # increment() 是线程安全的</span></span><br><span class="line">                freqs.computeIfAbsent(key, k -&gt; <span class="keyword">new</span> LongAdder()).increment();</span><br><span class="line">            &#125;</span><br><span class="line">    ));</span><br><span class="line">    forkJoinPool.shutdown();</span><br><span class="line">    forkJoinPool.awaitTermination(<span class="number">1</span>, TimeUnit.HOURS);</span><br><span class="line">    <span class="keyword">return</span> freqs.entrySet().stream()</span><br><span class="line">            .collect(Collectors.toMap(</span><br><span class="line">                    e -&gt; e.getKey(),</span><br><span class="line">                    e -&gt; e.getValue().longValue())</span><br><span class="line">            );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>来做一个性能测试，测试代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;good&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">good</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    StopWatch stopWatch = <span class="keyword">new</span> StopWatch();</span><br><span class="line">    stopWatch.start(<span class="string">&quot;normaluse&quot;</span>);</span><br><span class="line">    Map&lt;String, Long&gt; normaluse = normaluse();</span><br><span class="line">    stopWatch.stop();</span><br><span class="line">    Assert.isTrue(normaluse.size() == ITEM_COUNT, <span class="string">&quot;normaluse size error&quot;</span>);</span><br><span class="line">    Assert.isTrue(normaluse.entrySet().stream()</span><br><span class="line">                    .mapToLong(item -&gt; item.getValue())</span><br><span class="line">                    .reduce(<span class="number">0</span>, Long::sum) == LOOP_COUNT</span><br><span class="line">            , <span class="string">&quot;normaluse count error&quot;</span>);</span><br><span class="line">    stopWatch.start(<span class="string">&quot;gooduse&quot;</span>);</span><br><span class="line">    Map&lt;String, Long&gt; gooduse = gooduse();</span><br><span class="line">    stopWatch.stop();</span><br><span class="line">    Assert.isTrue(gooduse.size() == ITEM_COUNT, <span class="string">&quot;gooduse size error&quot;</span>);</span><br><span class="line">    Assert.isTrue(gooduse.entrySet().stream()</span><br><span class="line">                    .mapToLong(item -&gt; item.getValue())</span><br><span class="line">                    .reduce(<span class="number">0</span>, Long::sum) == LOOP_COUNT</span><br><span class="line">            , <span class="string">&quot;gooduse count error&quot;</span>);</span><br><span class="line">    log.info(stopWatch.prettyPrint());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<p><img src="https://gitee.com/yanglu_u/ImgRepository/raw/master/images/20210603222119.png" alt="image-20210603222119527"></p>
<h2 id="踩坑4：在写操作很多的场景下使用-CopyOnWriteArrayList-导致性能问题"><a href="#踩坑4：在写操作很多的场景下使用-CopyOnWriteArrayList-导致性能问题" class="headerlink" title="踩坑4：在写操作很多的场景下使用 CopyOnWriteArrayList 导致性能问题"></a>踩坑4：在写操作很多的场景下使用 CopyOnWriteArrayList 导致性能问题</h2><ul>
<li>案例场景</li>
</ul>
<p>之前在排查一个生产性能问题时，我们发现一段简单的非数据库操作的业务逻辑，消耗了超出预期的时间，在修改数据时操作本地缓存比回写数据库慢许多。查看代码发现，开发同学使用了 CopyOnWriteArrayList 来缓存大量的数据，而数据变化又比较频繁。</p>
<ul>
<li>原因分析</li>
</ul>
<p>在 Java 中，CopyOnWriteArrayList 虽然是一个线程安全的 ArrayList，但因为其实现方式是，每次修改数据时都会用 Arrays.copyOf 复制一份数据出来。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Object[] elements = getArray();</span><br><span class="line">        <span class="keyword">int</span> len = elements.length;</span><br><span class="line">        Object[] newElements = Arrays.copyOf(elements, len + <span class="number">1</span>);</span><br><span class="line">        newElements[len] = e;</span><br><span class="line">        setArray(newElements);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以有明显的适用场景，即读多写少或者说希望无锁读的场景。</p>
<p>通过下面代码来分析一下 CopyOnWriteArrayList 和普通加锁方式 ArrayList 的读写性能。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;write&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map <span class="title">testWrite</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; copyOnWriteArrayList = <span class="keyword">new</span> CopyOnWriteArrayList&lt;&gt;();</span><br><span class="line">    List&lt;Integer&gt; synchronizedList = Collections.synchronizedList(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">    StopWatch stopWatch = <span class="keyword">new</span> StopWatch();</span><br><span class="line">    <span class="keyword">int</span> loopCount = <span class="number">100000</span>;</span><br><span class="line">    stopWatch.start(<span class="string">&quot;Write:copyOnWriteArrayList&quot;</span>);</span><br><span class="line">    IntStream.rangeClosed(<span class="number">1</span>, loopCount)</span><br><span class="line">            .parallel()</span><br><span class="line">            .forEach(__ -&gt; copyOnWriteArrayList.add(ThreadLocalRandom.current().nextInt(loopCount)));</span><br><span class="line">    stopWatch.stop();</span><br><span class="line">    stopWatch.start(<span class="string">&quot;Write:synchronizedList&quot;</span>);</span><br><span class="line">    IntStream.rangeClosed(<span class="number">1</span>, loopCount)</span><br><span class="line">            .parallel()</span><br><span class="line">            .forEach(__ -&gt; synchronizedList.add(ThreadLocalRandom.current().nextInt(loopCount)));</span><br><span class="line">    stopWatch.stop();</span><br><span class="line">    log.info(stopWatch.prettyPrint());</span><br><span class="line">    Map result = <span class="keyword">new</span> HashMap();</span><br><span class="line">    result.put(<span class="string">&quot;copyOnWriteArrayList&quot;</span>, copyOnWriteArrayList.size());</span><br><span class="line">    result.put(<span class="string">&quot;synchronizedList&quot;</span>, synchronizedList.size());</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addAll</span><span class="params">(List&lt;Integer&gt; list)</span> </span>&#123;</span><br><span class="line">    list.addAll(IntStream.rangeClosed(<span class="number">1</span>, <span class="number">1000000</span>).boxed().collect(Collectors.toList()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;read&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map <span class="title">testRead</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; copyOnWriteArrayList = <span class="keyword">new</span> CopyOnWriteArrayList&lt;&gt;();</span><br><span class="line">    List&lt;Integer&gt; synchronizedList = Collections.synchronizedList(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">    addAll(copyOnWriteArrayList);</span><br><span class="line">    addAll(synchronizedList);</span><br><span class="line">    StopWatch stopWatch = <span class="keyword">new</span> StopWatch();</span><br><span class="line">    <span class="keyword">int</span> loopCount = <span class="number">1000000</span>;</span><br><span class="line">    <span class="keyword">int</span> count = copyOnWriteArrayList.size();</span><br><span class="line">    stopWatch.start(<span class="string">&quot;Read:copyOnWriteArrayList&quot;</span>);</span><br><span class="line">    IntStream.rangeClosed(<span class="number">1</span>, loopCount)</span><br><span class="line">            .parallel()</span><br><span class="line">            .forEach(__ -&gt; copyOnWriteArrayList.get(ThreadLocalRandom.current().nextInt(count)));</span><br><span class="line">    stopWatch.stop();</span><br><span class="line">    stopWatch.start(<span class="string">&quot;Read:synchronizedList&quot;</span>);</span><br><span class="line">    IntStream.range(<span class="number">0</span>, loopCount)</span><br><span class="line">            .parallel()</span><br><span class="line">            .forEach(__ -&gt; synchronizedList.get(ThreadLocalRandom.current().nextInt(count)));</span><br><span class="line">    stopWatch.stop();</span><br><span class="line">    log.info(stopWatch.prettyPrint());</span><br><span class="line">    Map result = <span class="keyword">new</span> HashMap();</span><br><span class="line">    result.put(<span class="string">&quot;copyOnWriteArrayList&quot;</span>, copyOnWriteArrayList.size());</span><br><span class="line">    result.put(<span class="string">&quot;synchronizedList&quot;</span>, synchronizedList.size());</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试结果如下。</p>
<p>10 万次写操作，CopyOnWriteArray 比同步的 ArrayList 慢 11 倍：</p>
<p><img src="https://gitee.com/yanglu_u/ImgRepository/raw/master/images/20210603223419.png" alt="image-20210603223419463"></p>
<p>100 万次读操作，CopyOnWriteArray 比同步的 ArrayList 快 5 倍：</p>
<p><img src="https://gitee.com/yanglu_u/ImgRepository/raw/master/images/20210603223834.png" alt="image-20210603223834431"></p>
<ul>
<li>解决方案</li>
</ul>
<p>使用 ConcurrentHashMap 来缓存。</p>
]]></content>
      <categories>
        <category>踩坑日记</category>
      </categories>
      <tags>
        <tag>并发编程</tag>
      </tags>
  </entry>
</search>
